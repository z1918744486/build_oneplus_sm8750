name: Build_oneplus_sm8750
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "Please select the model: "
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'

      keep_original_settings:
        description: "Keep the original kernel name and build time"
        required: false
        default: true
        type: boolean

      custom_kernel_suffix:
        description: "✏️ Custom kernel suffix (Example: -TG@qdykernel) - valid only when 'Keep original settings' is unchecked"
        required: false
        default: ''
      
      custom_kernel_time:
        description: "⏰ Custom build time (Example: Tue Dec 17 23:36:49 UTC 2024) - Only valid when 'Keep original settings' is unchecked"
        required: false
        default: ''
      
      enable_feature_x:
        description: "Generate AK3 without KPM - Uncheck to only generate AK3 with KPM"
        required: false
        default: true
        type: boolean
        
      enable_feature_y:
        description: "Enable lz4kd"
        required: false
        default: true
        type: boolean
        
      enable_feature_z:
        description: "Add Fengchi driver"
        required: false
        default: true
        type: boolean

      enable_feature_b:
         description: "Add BBR algorithm"
         required: false
         default: true
         type: boolean
      
       


jobs:
  build:
    name: Build_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 📊 Pre-build disk space check
        run: |
          echo "Disk space before building: "
          df -h
      
      - name: ⚙️ Set REPO_MANIFEST
        id: set_manifest
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac

      - name: ⚙️ Set KERNEL_TIME
        id: set_kernel_time
        run: |
          if [ "$KEEP_ORIGINAL" = "false" ] && [ -n "$CUSTOM_TIME" ]; then
            echo "Using custom build time: $CUSTOM_TIME"
            echo "KERNEL_TIME=$CUSTOM_TIME" >> $GITHUB_ENV
          else
            CURRENT_TIME="$(date -u '+%a %b %d %T UTC %Y')"
            echo "Using current UTC time: $CURRENT_TIME"
            echo "KERNEL_TIME=$CURRENT_TIME" >> $GITHUB_ENV
          fi

      - name: ⚙️ Set device-specific CCACHE_DIR
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${REPO_MANIFEST}" >> $GITHUB_ENV

      - name: 📦 Configure Git
        run: |
          git config --global user.name "Q1udaoyu"
          git config --global user.email "sucisama2888@gmail.com"

      - name: 🛠 Configure APT caching
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: 🛠 Cache APT packages
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm8750.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 📦 Install dependencies
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip
          
          echo "✅ Dependency installation completed"
          
      - name: 📥 Restore ccache (Loading Model：${{ env.DEVICES_NAME }} ccache)
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ env.REPO_MANIFEST }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.REPO_MANIFEST }}-
            ccache-${{ runner.os }}-

      - name: 📥 Init ccache
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "初始化 ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache has been initialized, skipping"
            fi
          else
            echo "ccache is not installed, skipping"
          fi


      - name: 📥 Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: 📥 Init repo and sync
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/vertekplus/kernel_manifest.git -b oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
         repo sync -c --no-clone-bundle --optimized-fetch --prune --force-sync -j$(nproc --all)
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         
      - name: ⚙️ Set SuKiSU Ultra
        run: |
            mkdir -p kernel_workspace/kernel_platform
            cd kernel_workspace/kernel_platform
            
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
            
            cd KernelSU
            KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            cp "${GITHUB_WORKSPACE}/.github/workflows/setup.bin" ./
            chmod +x setup.bin
            
            if [ ! -f "kernel/Makefile" ]; then
              echo "::error ::kernel/Makefile not found"
              ls -la
              exit 1
            fi
            ./setup.bin
            
      - name: 🔧 Set up SUSFS
        run: |
           cd kernel_workspace
           git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
           git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

           cd kernel_platform        
           cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
           cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
           cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

           cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
           cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
           cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
           cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/

           # Apply patches
           cd ./common

           if [ "${REPO_MANIFEST}" != "oneplus_13t" ] && [ "${REPO_MANIFEST}" != "oneplus_ace5_ultra" ] && [ "${REPO_MANIFEST}" != "oneplus_13" ]; then
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
           fi

           patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
           cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
           patch -p1 -F 3 < syscall_hooks.patch

           
           echo "Finished"

      - name: 🔧 Cache HMBird patch
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/hmbird_patch.c
          key: hmbird-patch-v1
          restore-keys: |
            hmbird-patch-v1
            
      
      - name: 🔧 Apply HMBird GKI patch
        run: |
          PATCH_FILE="${{ runner.temp }}/hmbird_patch.c"
          if [ ! -f "$PATCH_FILE" ]; then
            echo "下载HMBird补丁..."
            curl -sSLo "$PATCH_FILE" https://raw.githubusercontent.com/showdo/build_oneplus_sm8750/main/hmbird_patch.c
          fi
          
          cd kernel_workspace/kernel_platform/common/drivers
          cp "$PATCH_FILE" hmbird_patch.c
          
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          echo "HMBird patch applied succesfully"

          
      - name: 🔧 Apply lz4kd Patches
        if: ${{inputs.enable_feature_y }}
        run: |
          cd kernel_workspace/kernel_platform/common
            cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
            
      - name: 🔧 Set gki_defconfig
        env:
          ENABLE_B: ${{ github.event.inputs.enable_feature_b }}       
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Add VFS configuration settings
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_CRYPTO_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_COMPRESSION=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KERNEL_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          # Add BBR
          if [ "$ENABLE_B" = "true" ]; then
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_CUBIC=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          #Remove check_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: 🔧 Set Kernel name
        env:
          REPO_MANIFEST: ${{ github.event.inputs.REPO_MANIFEST }}
          KEEP_ORIGINAL: ${{ github.event.inputs.keep_original_settings }}
          CUSTOM_SUFFIX: ${{ github.event.inputs.custom_kernel_suffix }}
        run: |
          cd kernel_workspace/kernel_platform

          case "$DEVICES_NAME" in
            oneplus_13 | oneplus_ace5_pro | realme_GT7pro | realme_GT7pro_Speed)
              DEFAULT_SUFFIX="-android15-8-g013ec21bba94-abogki383916444-4k"
              ;;
            oneplus_13t)
              DEFAULT_SUFFIX="-android15-8-gba3bcfd39307-abogki413159095-4k"
              ;;
            oneplus_pad_2_pro)
              DEFAULT_SUFFIX="-android15-8-g0261dbe3cf7e-ab12786384-4k"
              ;;
            oneplus_ace5_ultra)
              DEFAULT_SUFFIX="-android15-8-gfc70d29746a7-abogki412262948-4k"
              ;;
          esac
          
          echo "Current model: $DEVICES_NAME"
          echo "Keep original settings: $KEEP_ORIGINAL"
          echo "Custom suffix: $CUSTOM_SUFFIX"
          echo "Default suffix: $DEFAULT_SUFFIX"
          
          if [ "$KEEP_ORIGINAL" = "false" ]; then
            if [ -n "$CUSTOM_SUFFIX" ]; then
              DEFAULT_SUFFIX="$CUSTOM_SUFFIX"
              echo "Use a custom kernel name: $DEFAULT_SUFFIX"
            else
              echo "Use a default kernel name for the model: $DEFAULT_SUFFIX"
            fi
          else
            echo "Keep the original kernel name setting"
          fi
          ESCAPED_SUFFIX=$(printf '%s\n' "$DEFAULT_SUFFIX" | sed 's:[\/&]:\\&:g')
          sudo sed -i "s/-4k/$ESCAPED_SUFFIX/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          
      - name: 🔧 Add sched_ext
        if: ${{inputs.enable_feature_z }}
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched  

      - name: 🔨 Build Kernel
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          
          export KBUILD_BUILD_TIMESTAMP="${KERNEL_TIME}"
          
          sudo apt install -y libelf-dev
          
          cd kernel_workspace/kernel_platform/common
          
         
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  gki_defconfig Image
          
      - name: 🔃 Clone AnyKernel3
        run: |
          git clone https://github.com/KernelSU-Next/AnyKernel3.git --depth=1 AnyKernel3_Template
          rm -rf ./AnyKernel3_Template/.git
          rm -rf ./AnyKernel3_Template/push.sh

      - name: 📦 Make AnyKernel3 (NoKPM)
        if: ${{ inputs.enable_feature_x }}
        run: |
          cp -r AnyKernel3_Template AnyKernel3_NoKPM
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3_NoKPM/

      - name: 📤 Upload AnyKernel3 (NoKPM)
        if: ${{ inputs.enable_feature_x }}
        uses: actions/upload-artifact@v4
        with:
          name: AK3_NoKPM_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU
          path: ./AnyKernel3_NoKPM/*

      - name: 📦 Apply KPM Patch (KPM)
        run: |
          cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: 📦 Make AnyKernel3 (KPM)
        run: |
          cp -r AnyKernel3_Template AnyKernel3
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/

      - name: 📤 Upload AnyKernel3 (KPM)
        uses: actions/upload-artifact@v4
        with:
          name: AK3_KPM_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU
          path: ./AnyKernel3/*
         
      - name: 📊 Post-build disk space check
        run: |
          echo "Disk space after building: "
          df -h
